/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    pages: Page;
    employees: Employee;
    services: Service;
    media: Media;
    'post-categories': PostCategory;
    'service-categories': ServiceCategory;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    settings: Setting;
    navigation: Navigation;
    'privacy-policy': PrivacyPolicy;
    sorting: Sorting;
  };
}
export interface User {
  id: number;
  role: 'admin' | 'editor' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
export interface Page {
  id: number;
  slug?: string | null;
  title: string;
  layout?: (HeroBlock | Section)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface HeroBlock {
  type: 'standard' | 'large';
  backgroundColor?: ('background' | 'accent' | 'muted' | 'primary' | 'secondary') | null;
  featuredImage?: number | Media | null;
  backgroundImage?: number | Media | null;
  content?: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  callToActionLink?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'hero';
}
export interface Media {
  id: number;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
export interface Section {
  sectionId: string;
  backgroundColor?: ('background' | 'accent' | 'muted' | 'primary' | 'secondary') | null;
  content?: (SectionHeader | ContentBlock)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'section';
}
export interface SectionHeader {
  type: 'default' | 'withDescription' | 'withPrefix' | 'withPrefixAndDescription';
  prefix?: string | null;
  header: string;
  quoteText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'section-header';
}
export interface ContentBlock {
  layout?: ('oneColumn' | 'twoThirdsOneThird' | 'halfAndHalf' | 'threeColumns' | 'fourColumns') | null;
  columnOne: {
    content: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnTwo?: {
    content: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnThree?: {
    content: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  columnFour?: {
    content: {
      root: {
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        type: string;
        version: number;
      };
      [k: string]: unknown;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
export interface Employee {
  id: number;
  slug?: string | null;
  name: string;
  createdBy?: (number | null) | User;
  title: string;
  bio?: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  image?: number | Media | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
export interface Service {
  id: number;
  slug?: string | null;
  title: string;
  summary?: string | null;
  layout?: (HeroBlock | QuoteBlock)[] | null;
  updatedAt: string;
  createdAt: string;
}
export interface QuoteBlock {
  backgroundColor?: ('background' | 'accent' | 'muted' | 'primary' | 'secondary') | null;
  quoteHeader: string;
  quoteText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quote';
}
export interface PostCategory {
  id: number;
  title: string;
  updatedAt: string;
  createdAt: string;
}
export interface ServiceCategory {
  id: number;
  title: string;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
export interface Setting {
  id: number;
  siteName: string;
  email: string;
  description: string;
  socialLinks?:
    | {
        platform: 'facebook' | 'instagram' | 'twitter' | 'linkedin' | 'youtube';
        url: string;
        id?: string | null;
      }[]
    | null;
  brand: {
    logo: number | Media;
    logoDark: number | Media;
    icon: number | Media;
    iconDark: number | Media;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
export interface Navigation {
  id: number;
  main?:
    | {
        link: {
          type?: ('page' | 'custom') | null;
          label: string;
          page?: (number | null) | Page;
          url?: string | null;
          includeSubNav?: boolean | null;
          nav?:
            | {
                link: {
                  type?: ('page' | 'custom') | null;
                  label: string;
                  page?: (number | null) | Page;
                  url?: string | null;
                  includeSubNav?: boolean | null;
                  nav?:
                    | {
                        link: {
                          type?: ('page' | 'custom') | null;
                          label: string;
                          page?: (number | null) | Page;
                          url?: string | null;
                          includeSubNav?: boolean | null;
                          nav?:
                            | {
                                id?: string | null;
                              }[]
                            | null;
                        };
                        id?: string | null;
                      }[]
                    | null;
                };
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  footer?:
    | {
        type?: ('page' | 'custom') | null;
        label: string;
        page?: (number | null) | Page;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
export interface PrivacyPolicy {
  id: number;
  title: string;
  privacyPolicy: {
    root: {
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      type: string;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
export interface Sorting {
  id: number;
  employeeOrder?: (number | Employee)[] | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}